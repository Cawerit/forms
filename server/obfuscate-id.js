var bigInt = require('big-integer');

//Do not modify!
//These constants affect the way our future AND current ids are encoded and decoded,
//so changing these values will make it impossible to decode previously encoded values, like links to surveys.
var TOP_VALUE = 1000000000,
	SEED = 578410587,
	INVERSE = 317549523;

/**
 * Useful utility for obfuscating the ids. We don't want our ids for surveys to be ordered in
 * sequential 1, 2, 3 order as that might be confusing to some users and lead to "off-by-one"-errors.
 * This module utilizes multiplicative inverses, as suggested by Eric Lippert in his great article
 * {@link https://ericlippert.com/2013/11/14/a-practical-use-of-multiplicative-inverses/|A practical use of multiplicative inverses}.
 *
 * ### Example
 * <pre>
 *     original = 1;
 *     encoded = encode(original); // 578410587
 *     decoded = decode(encoded); // 1
 * </pre>
 *
 * NOTE: This is NOT a security measure. The numbers generated by this module are not random
 * and can be decoded with little work.
 *
 * @type {{encode: function(number|string), decode: function(number|string)}}
 */
module.exports = {
	/**
	 * Transforms the given number to any other number between [0, TOP_VALUE]. The number will be unique
	 * in all other valid input values, but not random. I.e. no other valid input will produce the same
	 * result (assuming the constants remain the same) and giving the same input value twice will produce the same output.
	 * @param {string|number} number Integer between (0, TOP_VALUE) (both exclusive).
	 */
	encode: function (number) {
		return bigInt(number).times(SEED).mod(TOP_VALUE).toString();
	},
	/**
	 * Transforms the previously encoded value back to its original value, assuming that
	 * all the constants defined in this file remain the same as they were when encoding.
	 * NOTE: the value is returned as string instead of number to make sure
	 * the precision won't break if the result is above `Number.MAX_SAFE_INTEGER`.
	 * @param {string|number} encoded The previously encoded value
	 * @returns {string} String presentation of the decoded value.
	 */
	decode: function (encoded) {
		return bigInt(encoded).times(INVERSE).mod(TOP_VALUE).toString();
	}

};